package com.announcify.activity.widget;

import greendroid.widget.ItemAdapter;
import greendroid.widget.item.Item;

import java.util.List;

import android.content.ContentResolver;
import android.content.Context;
import android.database.CharArrayBuffer;
import android.database.ContentObserver;
import android.database.Cursor;
import android.database.DataSetObserver;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AlphabetIndexer;
import android.widget.ListAdapter;
import android.widget.SectionIndexer;

public class SectionedItemAdapter extends ItemAdapter implements SectionIndexer {
    private AlphabetIndexer indexer;

    public SectionedItemAdapter(Context context, List<Item> items, String sections) {
        super(context, items);
        indexer = new AlphabetIndexer(new FakeCursor(this), 0, sections);
    }
    
    public void setSections(String sections) {
    	
    }

    public int getPositionForSection(int sectionIndex) {
        return indexer.getPositionForSection(sectionIndex);
    }

    public int getSectionForPosition(int position) {
        return indexer.getSectionForPosition(position);
    }

    public Object[] getSections() {
        return indexer.getSections();
    }

    public View getView(int position, View convertView, ViewGroup parent) {
        final PluginItem item = (PluginItem) getItem(position);
        final int section = getSectionForPosition(position);

        if (getPositionForSection(section) == position) {
            item.header = indexer.getSections()[section].toString().trim();
        } else {
            item.header = null;
        }

        return super.getView(position, convertView, parent);
    }
    
    /**
     * An implementation of a Cursor that is almost useless. It is simply used
     * for the SectionIndexer to browse our underlying data.
     * 
     * @author Cyril Mottier
     */
    private class FakeCursor implements Cursor {

        private ListAdapter mAdapter;
        private int mPosition;

        public FakeCursor(ListAdapter adapter) {
            mAdapter = adapter;
        }

        public void close() {
        }

        public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer) {
        }

        public void deactivate() {
        }

        public byte[] getBlob(int columnIndex) {
            return null;
        }

        public int getColumnCount() {
            return 0;
        }

        public int getColumnIndex(String columnName) {
            return 0;
        }

        public int getColumnIndexOrThrow(String columnName) throws IllegalArgumentException {
            return 0;
        }

        public String getColumnName(int columnIndex) {
            return null;
        }

        public String[] getColumnNames() {
            return null;
        }

        public int getCount() {
            return mAdapter.getCount();
        }

        public double getDouble(int columnIndex) {
            return 0;
        }

        public Bundle getExtras() {
            return null;
        }

        public float getFloat(int columnIndex) {
            return 0;
        }

        public int getInt(int columnIndex) {
            return 0;
        }

        public long getLong(int columnIndex) {
            return 0;
        }

        public int getPosition() {
            return 0;
        }

        public short getShort(int columnIndex) {
            return 0;
        }

        public String getString(int columnIndex) {
            final PluginItem item = (PluginItem) mAdapter.getItem(mPosition);
            return (String) item.getName().substring(0, 1);
        }

        public boolean getWantsAllOnMoveCalls() {
            return false;
        }

        public boolean isAfterLast() {
            return false;
        }

        public boolean isBeforeFirst() {
            return false;
        }

        public boolean isClosed() {
            return false;
        }

        public boolean isFirst() {
            return false;
        }

        public boolean isLast() {
            return false;
        }

        public boolean isNull(int columnIndex) {
            return false;
        }

        public boolean move(int offset) {
            return false;
        }

        public boolean moveToFirst() {
            return false;
        }

        public boolean moveToLast() {
            return false;
        }

        public boolean moveToNext() {
            return false;
        }

        public boolean moveToPosition(int position) {
            if (position < -1 || position > getCount()) {
                return false;
            }
            mPosition = position;
            return true;
        }

        public boolean moveToPrevious() {
            return false;
        }

        public void registerContentObserver(ContentObserver observer) {
        }

        public void registerDataSetObserver(DataSetObserver observer) {
        }

        public boolean requery() {
            return false;
        }

        public Bundle respond(Bundle extras) {
            return null;
        }

        public void setNotificationUri(ContentResolver cr, Uri uri) {
        }

        public void unregisterContentObserver(ContentObserver observer) {
        }

        public void unregisterDataSetObserver(DataSetObserver observer) {
        }
    }
}