package com.announcify.ui.activity;

import android.content.Context;
import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.provider.BaseColumns;
import android.provider.ContactsContract.Groups;
import android.view.ContextMenu;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AutoCompleteTextView;
import android.widget.CheckedTextView;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.SimpleCursorAdapter.CursorToStringConverter;
import android.widget.TextView;

import com.announcify.R;
import com.announcify.api.background.sql.model.GroupModel;
import com.announcify.api.background.util.AnnouncifySettings;
import com.announcify.api.ui.activity.BaseActivity;


// TODO: merge with ContactActivity! -> ChooserActivity
public class GroupActivity extends ChooserActivity {

    @Override
    protected void onCreate(final Bundle bundle) {
        super.onCreate(bundle, R.layout.activity_choose);

        checkBlock.setChecked(settings.getBlockGroups());
        checkBlock.setOnClickListener(new OnClickListener() {

            public void onClick(final View v) {
                final boolean enable = !checkBlock.isChecked();
                settings.setBlockGroups(enable);
                checkBlock.setChecked(enable);
            }
        });

        model = new GroupModel(this);

        listAdapter = new SimpleWhiteCursorAdapter(this,
                android.R.layout.simple_list_item_1, null,
                new String[] { GroupModel.KEY_GROUP_TITLE },
                new int[] { android.R.id.text1 });

        autoAdapter = new SimpleWhiteCursorAdapter(this,
                android.R.layout.simple_list_item_1, null,
                new String[] { Groups.TITLE }, new int[] { android.R.id.text1 });

        autoAdapter.setCursorToStringConverter(new CursorToStringConverter() {

            public CharSequence convertToString(final Cursor cursor) {
                return cursor.getString(cursor.getColumnIndex(Groups.TITLE));
            }
        });
    }

    @Override
    public void onCreateContextMenu(final ContextMenu menu, final View v,
            final ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);

        getMenuInflater().inflate(R.menu.context_choose, menu);
    }

    @Override
    protected void onStart() {
        super.onStart();

        refreshList();

        autoCursor = getContentResolver().query(Groups.CONTENT_URI,
                new String[] { BaseColumns._ID, Groups.TITLE }, null, null,
                Groups.TITLE);
        autoAdapter.changeCursor(autoCursor);
    }

    @Override
    protected void onStop() {
        listCursor.close();
        autoCursor.close();

        super.onStop();
    }

    private void refreshList() {
        if (listCursor != null) {
            listCursor.close();
        }

        listCursor = model.getAll();
        listAdapter.changeCursor(listCursor);
    }
}
