package com.announcify.engine.gmail;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.scribe.builder.ServiceBuilder;
import org.scribe.builder.api.GoogleApi;
import org.scribe.model.OAuthRequest;
import org.scribe.model.Response;
import org.scribe.model.Token;
import org.scribe.model.Verb;
import org.scribe.model.Verifier;
import org.scribe.oauth.OAuthService;
import org.xml.sax.Attributes;
import org.xml.sax.HandlerBase;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import com.announcify.engine.Servlet;
import com.announcify.engine.model.Credential;
import com.announcify.engine.storage.JSONEngine;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

@SuppressWarnings("serial")
public class GmailServlet extends Servlet {

    private static final String AUTHORIZE_URL = "https://www.google.com/accounts/OAuthAuthorizeToken?oauth_token=";
    private static final String PROTECTED_RESOURCE_URL = "https://mail.google.com/mail/feed/atom/";
    private static final String SCOPE = "https://mail.google.com/mail/feed/atom/"; 


    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            UserService service = UserServiceFactory.getUserService();

            if (request.getUserPrincipal() != null) {
                OAuthService oauth = new ServiceBuilder()
                .provider(GoogleApi.class)
                .apiKey("966887741266.apps.googleusercontent.com")
                .apiSecret("CO7G2by/IHRH+j2e/14fVLwA")
                .scope(SCOPE)
                .callback(getServerURI(request) + "gmail/login/success")
                .build();

                final User user = service.getCurrentUser();

                Credential credential = Credential.getCredentialForIdentity(user.getEmail());

                if (request.getParameter("oauth_verifier") == null) {
                    if (credential == null) {
                        final Token requestToken = oauth.getRequestToken();

                        credential = new GmailCredential(requestToken, user.getEmail());
                        JSONEngine.persist(credential);

                        response.sendRedirect(response.encodeRedirectURL(AUTHORIZE_URL + requestToken.getToken()));
                    } else {
                        doSomething(oauth, response, credential.getToken());
                    }
                } else {
                    final Verifier verifier = new Verifier(request.getParameter("oauth_verifier"));

                    final Token accessToken = oauth.getAccessToken(credential.getToken(), verifier);

                    credential = new GmailCredential(accessToken, user.getEmail());
                    JSONEngine.update(credential, Credential.getDocIdForIdentity(user.getEmail()));

                    response.getWriter().write("Login successful.");
                }
            } else {
                final String thisURL = request.getRequestURI();

                response.getWriter().println("<p>Please <a href=\"" + service.createLoginURL(thisURL) + "\">sign in</a>.</p>");
            }
        } catch (Exception e) {
            e.printStackTrace();

            response.sendError(500);
        }
    }


    private void doSomething(OAuthService oauth, HttpServletResponse response, Token accessToken) throws IOException, ParserConfigurationException, SAXException {
        OAuthRequest oauthRequest = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
        oauth.signRequest(accessToken, oauthRequest);
        Response oauthResponse = oauthRequest.send();
        response.getWriter().write(oauthResponse.getBody());
        System.out.println(oauthResponse.getBody());
        
        

        GmailParser parser = new GmailParser();
        parser.parse(oauthResponse.getStream());

        // System.out.println("Thats it man! Go and build something awesome with Scribe! :)");
    }
}
