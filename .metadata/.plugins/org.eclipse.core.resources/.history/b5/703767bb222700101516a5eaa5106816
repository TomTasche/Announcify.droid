package com.announcify.ui.activity;

import android.content.Context;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Color;
import android.media.AudioManager;
import android.os.Bundle;
import android.provider.MediaStore.Audio;
import android.speech.tts.TextToSpeech.OnInitListener;
import android.view.ContextMenu;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AlphabetIndexer;
import android.widget.ArrayAdapter;
import android.widget.CheckedTextView;
import android.widget.CursorAdapter;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.TableRow;
import android.widget.TextView;

import com.announcify.R;
import com.announcify.api.sql.model.TranslationModel;
import com.announcify.api.util.AnnouncifySettings;
import com.announcify.service.ManagerService;
import com.announcify.tts.Speaker;

public class ReplaceActivity extends BaseActivity {

    private SimpleCursorAdapter adapter;

    private EditText with;

    private EditText replace;

    private ListView list;

    private TranslationModel model;

    private Cursor cursor;
    
    private Speaker speaker;


    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        setActionBarContentView(R.layout.activity_choose);

        with = (EditText)findViewById(R.id.edit_with);
        replace = (EditText)findViewById(R.id.edit_replace);
        list = (ListView)findViewById(android.R.id.list);

        adapter = new SimpleCursorAdapter(this, R.layout.list_item_choose, null, new String[] {TranslationModel.KEY_PLUGIN_FROM, TranslationModel.KEY_PLUGIN_TO}, new int[] {R.id.textLeft, R.id.textRight});

        list.setBackgroundColor(Color.WHITE);
        list.setCacheColorHint(Color.TRANSPARENT);
        list.setFastScrollEnabled(true);
        list.setAdapter(adapter);
        registerForContextMenu(list);

        findViewById(R.id.button_speak).setOnClickListener(new OnClickListener() {

            public void onClick(final View v) {
                speaker.speak(with.getText().toString());
            }
        });

        findViewById(R.id.button_add).setOnClickListener(new OnClickListener() {

            public void onClick(final View v) {
                model.add(replace.getText().toString(), with.getText().toString(), "", "");

                cursor.close();
                cursor = model.getAll(TranslationModel.KEY_PLUGIN_FROM);
                
                adapter.changeCursor(cursor);
            }
        });
    }
    
    @Override
    protected void onStart() {
        super.onStart();
        
        model = new TranslationModel(this);
        cursor = model.getAll(TranslationModel.KEY_PLUGIN_FROM);
        
        adapter.changeCursor(cursor);
        
        speaker = new Speaker(this, null);
    }

    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);

        getMenuInflater().inflate(R.menu.context_choose, menu);
    }

    @Override
    public boolean onContextItemSelected(MenuItem item) {
        final AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo)item
        .getMenuInfo();

        model.remove(info.id);
        
        cursor.close();
        cursor = model.getAll(TranslationModel.KEY_PLUGIN_FROM);
        
        adapter.changeCursor(cursor);

        return super.onContextItemSelected(item);
    }
    
    @Override
    protected void onPause() {
        cursor.close();
        model.close();
        
        speaker.shutdown();
        
        super.onPause();
    }
}
